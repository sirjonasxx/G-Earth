import gearth.app.protocol.HConnection;
import gearth.protocol.connection.HClient;
import gearth.app.protocol.crypto.RC4Cipher;
import gearth.app.protocol.crypto.RC4Shockwave;
import gearth.app.protocol.memory.Rc4Obtainer;
import gearth.app.protocol.memory.habboclient.HabboClientFactory;
import gearth.app.protocol.memory.habboclient.external.MemoryClient;
import gearth.app.protocol.packethandler.EncryptedPacketHandler;
import gearth.app.protocol.packethandler.shockwave.ShockwavePacketOutgoingHandler;
import org.bouncycastle.util.encoders.Hex;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.atomic.AtomicReference;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.mockStatic;

public class TestRc4Shockwave {

    private final byte[][] encryptedBuffers = new byte[][]{
            Hex.decode("73767a6a345130766e37395045673244644668786e4473634a5a42626e796957324f637861447752516479726c70596e4d337a4435377038534939585559683573336e353450357470612b5962464d42704e7939794f4265505a4751"),
            Hex.decode("6a43445a57773378327036554930445059686454473377616a6a4a556e654466706b6541"),
            Hex.decode("483745783941486651")
    };

    private final byte[][] potentialTables = new byte[][] {
            Hex.decode("000000cf000000a400000143000001e1000001ce00000138000001f800000105000001230000000f000000660000008a000000ab000001c50000016600000081000001a7000001520000007f0000004c00000079000001d9000001bb0000001600000018000001f1000001d400000187000000c8000001ca000001de0000015d0000005d00000175000001a60000019c0000013a0000017f000001bd00000063000000bd0000012a000000f2000001a4000001fb000000a2000001f5000001be0000003f0000011b0000019b000001b2000001a90000019e000000e1000001bc000000b70000004900000174000001330000014f0000016b000001cf000001eb0000006c0000017e000000c9000001aa000000f5000001c6000001e2000001e500000003000001a500000115000000600000019200000142000001930000002a000001e800000021000001ef000001bf000001da0000010000000042000000470000017d00000087000001a0000001cb000001ec000001300000018e00000059000001d5000001730000018d00000198000001f900000119000001b4000001b6000001370000007d000001fe000001df0000001d000001c70000006100000075000001f20000003300000106000001d000000151000001d100000078000001850000014e000000b40000017c0000005b0000003d00000184000001350000009f000001c1000000a30000000d0000015b000001030000003c00000071000000c700000183000001c20000012900000007000001c000000011000001ad0000004e000000ad000000260000017b0000016d00000022000001f300000160000001320000011c000001b8000001fc00000113000001d2000001f6000001ed000000a7000001e6000001010000017a000000580000007c000000400000013b00000083000001db000001c80000008b000001d600000181000000d10000003000000000000001e0000001c300000045000001f0000001680000017900000038000001dc0000010f0000014d000000b0000001b9000000980000016400000126000000fe0000012b0000015f000000c1000000e40000001f000000f100000084000001f7000000d800000153000001780000002d000001fa0000014700000116000001090000006b000000d300000032000000f0000001f4000001cd0000018000000118000001ff00000008000000d2000001dd00000189000001d3000000b80000018a00000114000001c900000015000001c4000001340000012d000001ba000001d7000000aa00000053000000c0000000d9000000880000003b00000188000001ea000001e4000001d80000013d000000dc00000163000000cd0000002c00000019000001fd00000094000001ee00000159000001e70000003e000000310000003900000062000000a10000009d00000005000000c3000000270000005400000044000000fa00000080000000e000000006000000d60000002f0000010c000000020000010e00000085000000ff000000f6000000ec000000a5000000cc00000074000000a900000048000000e200000056000000b20000006900000086000000bb000000f300000093000000730000010200000076000000c60000008d000001080000004300000057000000ac00000009000000c20000009c000000e3000000ea000000df00000004000000e7000000680000011a000000b300000055000000ca000000280000003500000125000001110000004b0000000a0000000c0000009b00000107000000bf0000012c000000de0000010b000000c50000005c0000008c000001220000007e0000003a000000ed0000011f000001440000012e000000d5000000ce000000640000008f0000006d000000f9000000d000000104000000200000009a0000003600000070000000960000007a0000005a00000034000000f7000001540000006e0000004d00000012000000fb0000015c00000013000000f400000092000000a0000000b1000001580000006a000000b50000001000000117000001500000014a00000148000000500000010a0000005f00000014000001670000006700000097000000e90000008e000000dd0000000e000000a80000014600000090000000e80000014100000095000000d70000015700000082000000370000012800000089000000cb0000009e0000007200000186000000bc00000051000001270000013f000000fd0000016f000001900000005e000000b90000012000000161000001960000016e000000010000011200000149000000da00000077000000f8000000e600000110000000410000002e0000014b000001a30000000b00000052000001a20000001b000001a10000016a000001690000007b0000001c0000015e000000170000006f0000013c0000019a000001720000019900000145000000ee0000015600000136000000eb0000001a000001620000009100000165000000b6000001b5000000ae0000011e00000177000000ba0000019f000001ac0000017100000046000001a8000000c400000182000000ef0000004f00000099000001b7000000a6000001cc000000db0000011d000001ab000001ae0000014000000170000001b100000194000000af000001390000016c000001550000001e000000fc0000014c000001910000018b00000121000001b3000000e5000001310000002400000023000001b00000006500000195000001240000002b0000018f0000010d000000290000018c0000013e000000250000019d000001e30000015a000000d40000004a000001af000000be000001e900000176000001970000012f"),
            Hex.decode("00000129000001a9000001b600000078000001b70000011f00000159000001bb00000008000001ae00000058000000610000005f0000019c00000145000001ee00000141000001700000018a000000a000000143000001bf00000195000001ea000001d0000001fd0000001a00000025000000aa000000d40000012e0000002e0000007b00000187000000c0000001470000004e000001ef000001f7000001b10000013e0000012100000016000001c5000001fa0000013c000000bb000001c700000139000001f9000001d30000010d000001eb0000018f000000fe000000fc000001bd000000b2000001e2000001990000003e000001d50000014e0000017e00000112000001ce000001bc000000e2000001ad0000013d000000e0000001600000006a000001de000001b5000001fe000001380000014b000001a800000007000000eb000000e50000002f000001e8000000a200000198000000db000000af000000830000018100000067000000fb000000b5000000a9000001e40000019400000107000000320000007d000001a2000001850000007e000001a6000000c20000009d000001ac000001d8000001740000015f000001e700000085000001df0000019d0000015d000000e6000001fc000000600000012a00000116000001ab000001890000005b0000004c00000022000001e1000001f0000001dc00000193000001f5000001e50000017300000043000001f3000001d40000014a0000012c00000131000001ec000001f6000000ff000001a700000097000001b30000017c00000109000001aa00000175000000ba0000009e000001b2000001fb0000008e0000019a00000104000000ec0000013f000001ca00000146000001db00000000000001cb0000014400000165000001c20000011400000196000000ee00000163000001e00000018c000001670000012b00000128000001ed000001560000011300000152000001f1000001ff00000019000001c300000003000000d8000001e30000003d00000098000000ce0000019f000000330000017f000001900000001e000001cf000000f8000000440000017800000012000001150000010600000088000001da000001f4000000630000005e0000010500000050000000590000009500000171000001d7000001f8000001af000001830000002300000157000001e900000177000001f2000001c00000002a0000013b00000192000001b4000000f00000013400000068000001d900000069000001080000001c00000011000001530000008a00000135000001840000005600000179000001a4000001cc00000127000000f5000001dd00000188000001e60000000a000001be0000010f000001c900000099000000ea0000016b000001a5000000d6000001240000003500000151000000ef00000073000000e1000000c10000002600000002000000e30000004a000000e8000000f6000000c500000090000000f2000000310000010a0000010e00000045000000180000003700000047000000c6000000290000004800000102000000090000006e000000de0000006400000065000000840000001d0000003b000000d30000000c0000011e000000bf00000039000000b1000000e7000000540000009b0000001300000074000000490000008200000081000000f4000000a80000008b00000125000000cb000000f90000000400000030000000930000000e000000ae000001030000003a000000cd0000000f000000b6000000d90000003f0000000b0000002d0000006f0000005100000120000000bd000000a6000000df0000011b000000da000000a1000001320000007000000096000000cc000000bc000000c900000089000000400000005700000021000000d5000000c80000014200000155000000800000006b000000be000000a400000066000000c3000000f30000004b000000910000002b000000270000008d000000cf000000b00000005a000000b8000000e90000015000000166000001370000009f0000007c0000007900000042000000770000005d000000140000010c0000001700000172000000d00000016e0000015c00000123000000ab0000015e00000028000000a30000001b0000017a0000012d0000002c0000015a0000003c000000ad0000016100000036000000b70000007500000015000000ed0000004d0000014c000001000000004f0000013000000046000000dc0000009a000000c70000014f0000000d0000011c0000006c0000006d0000002000000001000001260000016a000001820000008c000000870000007a0000017d0000013a000001760000007f000000b40000003400000140000000720000019e00000071000000b30000001f0000014d00000169000000d10000005c000000d20000018d00000053000001110000018b00000148000001970000019b00000119000000760000011d000001a30000016400000062000000410000016c0000010b00000180000000e40000009400000038000000050000016800000055000000c4000001b8000000ca000000b900000010000000dd00000110000001a00000012f000001910000017b0000009c00000024000000f1000001d20000009200000136000000f7000001a100000158000000fa000001cd00000118000001b90000016f000001b000000086000001c1000000ac0000013300000122000000520000008f000001c8000001620000018e0000015400000006000000a5000001c6000000fd000000a70000016d000001ba0000011a000001d60000014900000117000001d10000015b000000d70000018600000101000001c4"),
            Hex.decode("0000012b000001a9000000d8000001ec000001b70000011f000000590000006a00000008000001ca0000011400000061000001cc000001f8000001db000001b100000141000001d50000018a000000a0000001e5000000db000001950000005b000001d00000014a000000630000007b000001d400000003000000440000002e0000012c000001ea00000106000001eb0000004e000001ef0000003d00000181000000a20000012100000022000001c2000001740000013c000001a7000001c7000001390000017300000167000001f7000000990000018f000000fe00000185000001bd000000b2000001e0000001990000003e0000011500000129000001cb00000112000001ce000000fb000000e20000002a000001cf000000e00000016000000194000001de000001b5000001e2000001aa0000014b000001f000000105000000eb000000430000002f000001e80000018c000001980000019f000001f1000001e9000001560000012e00000025000001f4000000a9000001e40000013e0000005e00000032000001f3000000d4000000fc00000007000001b2000000c200000184000000bb000001d8000001470000006000000095000001fc000001df0000007e000001ed0000016500000193000001f90000012a00000000000001ab000001890000016b0000004c0000017f000000ff000001a8000001dc00000085000001f5000000f800000058000000e500000011000000ba000001fd0000010d000000d6000001d700000012000000ec0000015d000001ad000000b500000128000001c5000001a20000017500000151000001dd000001a600000088000001da000000f5000001fe000001d30000005000000016000001e6000000f0000001ae000001bb00000144000000e60000009700000163000001960000017800000035000001c30000009e0000008e000000ce000001b6000001ac0000019c00000124000001b3000000af000001520000019a0000001e000001380000017c0000019d000001bc000000680000014e0000001a000001a50000015900000067000001f6000001e7000001be0000013500000177000001040000007d000000c000000190000001af000000ee0000017e000001ff000001b4000001710000010f000001ee00000153000001e1000001bf00000078000000190000001c0000017000000083000001fa000001f2000001c0000001e30000013b0000019200000116000001430000013400000157000001d9000000aa0000010800000145000000230000013f0000008a0000005f0000009d0000005600000131000001a40000003300000098000001880000013d00000109000001130000000a0000014600000183000001c900000107000000ea00000187000001fb00000179000001270000015f00000069000000ef00000073000000e1000000c10000002600000002000000e30000004a000000e8000000f6000000c500000090000000f2000000310000010a0000010e00000045000000180000003700000047000000c6000000290000004800000102000000090000006e000000de0000006400000065000000840000001d0000003b000000d30000000c0000011e000000bf00000039000000b1000000e7000000540000009b0000001300000074000000490000008200000081000000f4000000a80000008b00000125000000cb000000f90000000400000030000000930000000e000000ae000001030000003a000000cd0000000f000000b6000000d90000003f0000000b0000002d0000006f0000005100000120000000bd000000a6000000df0000011b000000da000000a1000001320000007000000096000000cc000000bc000000c900000089000000400000005700000021000000d5000000c80000014200000155000000800000006b000000be000000a400000066000000c3000000f30000004b000000910000002b000000270000008d000000cf000000b00000005a000000b8000000e90000015000000166000001370000009f0000007c0000007900000042000000770000005d000000140000010c0000001700000172000000d00000016e0000015c00000123000000ab0000015e00000028000000a30000001b0000017a0000012d0000002c0000015a0000003c000000ad0000016100000036000000b70000007500000015000000ed0000004d0000014c000001000000004f0000013000000046000000dc0000009a000000c70000014f0000000d0000011c0000006c0000006d0000002000000001000001260000016a000001820000008c000000870000007a0000017d0000013a000001760000007f000000b40000003400000140000000720000019e00000071000000b30000001f0000014d00000169000000d10000005c000000d20000018d00000053000001110000018b00000148000001970000019b00000119000000760000011d000001a30000016400000062000000410000016c0000010b00000180000000e40000009400000038000000050000016800000055000000c4000001b8000000ca000000b900000010000000dd00000110000001a00000012f000001910000017b0000009c00000024000000f1000001d20000009200000136000000f7000001a100000158000000fa000001cd00000118000001b90000016f000001b000000086000001c1000000ac0000013300000122000000520000008f000001c8000001620000018e0000015400000006000000a5000001c6000000fd000000a70000016d000001ba0000011a000001d60000014900000117000001d10000015b000000d70000018600000101000001c4"),
            Hex.decode("0000012b000001a9000000d8000001ec000001b70000011f0000019a0000006a00000008000001ca0000011400000061000001cc000001f8000001db000001ee00000141000001150000018a000000a0000000f8000000db000001950000005b000001d0000001fd000000630000007b000000ba00000003000000440000002e0000012c000001ea00000106000001070000004e000001ef000001f700000181000000a20000012100000016000001c2000001fe0000013c0000015d000001c70000013900000060000001670000010d000000990000018f000000fe00000185000001bd000000b2000001e0000001990000003e000001d500000129000001cb00000112000001ce000000fb000000e20000002a000001cf000000e00000016000000194000001de000001b5000001e2000001aa0000014b000001f000000105000000eb000000e50000002f000001e80000013e000001980000019f000001f1000001e9000001560000012e00000025000001f4000000a9000001e40000018c0000005e0000003200000011000000d4000000fc00000007000001b2000000c200000184000000bb000001d8000001740000005800000095000001fc000001df0000007e000001ed0000016500000193000001f90000012a00000000000001ab000001890000016b0000004c0000017f000000ff000001a8000001dc00000085000001f5000001e50000017300000043000001f3000001d40000014a0000003d000001790000007800000145000001e1000001a7000001ad000000b500000128000001c5000001a20000017500000151000001dd000001a600000088000001da000000f500000147000001d30000005000000022000001e6000000f0000001ae000001bb00000144000000e60000009700000163000001960000017800000035000001c30000009e0000008e000000ce000001b6000001ac0000019c00000124000001b3000000af00000152000000590000001e000001380000017c0000019d000001bc000001570000014e0000001a000001a50000015900000067000001f6000001e7000001be0000013500000177000001040000007d000000c000000190000001af000000ee000001b1000001ff000001b4000001710000010f0000017e00000153000000ec000001bf000001d7000000190000001c0000017000000083000001fa000001f2000001c0000001e30000013b0000019200000116000001430000013400000068000001d9000000aa0000010800000012000000230000013f0000008a0000005f0000009d0000005600000131000001a40000003300000098000001880000013d00000109000001130000000a0000014600000183000001c9000001eb000000ea00000187000001fb000000d6000001270000015f00000069000000ef00000073000000e1000000c10000002600000002000000e30000004a000000e8000000f6000000c500000090000000f2000000310000010a0000010e00000045000000180000003700000047000000c6000000290000004800000102000000090000006e000000de0000006400000065000000840000001d0000003b000000d30000000c0000011e000000bf00000039000000b1000000e7000000540000009b0000001300000074000000490000008200000081000000f4000000a80000008b00000125000000cb000000f90000000400000030000000930000000e000000ae000001030000003a000000cd0000000f000000b6000000d90000003f0000000b0000002d0000006f0000005100000120000000bd000000a6000000df0000011b000000da000000a1000001320000007000000096000000cc000000bc000000c900000089000000400000005700000021000000d5000000c80000014200000155000000800000006b000000be000000a400000066000000c3000000f30000004b000000910000002b000000270000008d000000cf000000b00000005a000000b8000000e90000015000000166000001370000009f0000007c0000007900000042000000770000005d000000140000010c0000001700000172000000d00000016e0000015c00000123000000ab0000015e00000028000000a30000001b0000017a0000012d0000002c0000015a0000003c000000ad0000016100000036000000b70000007500000015000000ed0000004d0000014c000001000000004f0000013000000046000000dc0000009a000000c70000014f0000000d0000011c0000006c0000006d0000002000000001000001260000016a000001820000008c000000870000007a0000017d0000013a000001760000007f000000b40000003400000140000000720000019e00000071000000b30000001f0000014d00000169000000d10000005c000000d20000018d00000053000001110000018b00000148000001970000019b00000119000000760000011d000001a30000016400000062000000410000016c0000010b00000180000000e40000009400000038000000050000016800000055000000c4000001b8000000ca000000b900000010000000dd00000110000001a00000012f000001910000017b0000009c00000024000000f1000001d20000009200000136000000f7000001a100000158000000fa000001cd00000118000001b90000016f000001b000000086000001c1000000ac0000013300000122000000520000008f000001c8000001620000018e0000015400000006000000a5000001c6000000fd000000a70000016d000001ba0000011a000001d60000014900000117000001d10000015b000000d70000018600000101000001c4"),
            Hex.decode("0000012b000001a9000000d8000001ec000001b70000011f000000590000006a00000008000001ca0000011400000061000001cc000001f8000001db000001b100000141000001d50000018a000000a0000001e5000000db000001950000005b000001d00000014a000000630000007b000001d400000003000000440000002e0000012c000001ea00000106000001eb0000004e000001ef0000003d00000181000000a20000012100000022000001c2000001740000013c000001a7000001c7000001390000017300000167000001f7000000990000018f000000fe00000185000001bd000000b2000001e0000001990000003e0000011500000129000001cb00000112000001ce000000fb000000e20000002a000001cf000000e00000016000000194000001de000001b5000001e2000001aa0000014b000001f000000105000000eb000000430000002f000001e80000018c000001980000019f000001f1000001e9000001560000012e00000025000001f4000000a9000001e40000013e0000005e00000032000001f3000000d4000000fc00000007000001b2000000c200000184000000bb000001d8000001470000006000000095000001fc000001df0000007e000001ed0000016500000193000001f90000012a00000000000001ab000001890000016b0000004c0000017f000000ff000001a8000001dc00000085000001f5000000f800000058000000e500000011000000ba000001fd0000010d000000d6000001d700000012000000ec0000015d000001ad000000b500000128000001c5000001a20000017500000151000001dd000001a600000088000001da000000f5000001fe000001d30000005000000016000001e6000000f0000001ae000001bb00000144000000e60000009700000163000001960000017800000035000001c30000009e0000008e000000ce000001b6000001ac0000019c00000124000001b3000000af000001520000019a0000001e000001380000017c0000019d000001bc000000680000014e0000001a000001a50000015900000067000001f6000001e7000001be0000013500000177000001040000007d000000c000000190000001af000000ee0000017e000001ff000001b4000001710000010f000001ee00000153000001e1000001bf00000078000000190000001c0000017000000083000001fa000001f2000001c0000001e30000013b0000019200000116000001430000013400000157000001d9000000aa0000010800000145000000230000013f0000008a0000005f0000009d0000005600000131000001a40000003300000098000001880000013d00000109000001130000000a0000014600000183000001c900000107000000ea00000187000001fb00000179000001270000015f00000069000000ef00000073000000e1000000c10000002600000002000000e30000004a000000e8000000f6000000c500000090000000f2000000310000010a0000010e00000045000000180000003700000047000000c6000000290000004800000102000000090000006e000000de0000006400000065000000840000001d0000003b000000d30000000c0000011e000000bf00000039000000b1000000e7000000540000009b0000001300000074000000490000008200000081000000f4000000a80000008b00000125000000cb000000f90000000400000030000000930000000e000000ae000001030000003a000000cd0000000f000000b6000000d90000003f0000000b0000002d0000006f0000005100000120000000bd000000a6000000df0000011b000000da000000a1000001320000007000000096000000cc000000bc000000c900000089000000400000005700000021000000d5000000c80000014200000155000000800000006b000000be000000a400000066000000c3000000f30000004b000000910000002b000000270000008d000000cf000000b00000005a000000b8000000e90000015000000166000001370000009f0000007c0000007900000042000000770000005d000000140000010c0000001700000172000000d00000016e0000015c00000123000000ab0000015e00000028000000a30000001b0000017a0000012d0000002c0000015a0000003c000000ad0000016100000036000000b70000007500000015000000ed0000004d0000014c000001000000004f0000013000000046000000dc0000009a000000c70000014f0000000d0000011c0000006c0000006d0000002000000001000001260000016a000001820000008c000000870000007a0000017d0000013a000001760000007f000000b40000003400000140000000720000019e00000071000000b30000001f0000014d00000169000000d10000005c000000d20000018d00000053000001110000018b00000148000001970000019b00000119000000760000011d000001a30000016400000062000000410000016c0000010b00000180000000e40000009400000038000000050000016800000055000000c4000001b8000000ca000000b900000010000000dd00000110000001a00000012f000001910000017b0000009c00000024000000f1000001d20000009200000136000000f7000001a100000158000000fa000001cd00000118000001b90000016f000001b000000086000001c1000000ac0000013300000122000000520000008f000001c8000001620000018e0000015400000006000000a5000001c6000000fd000000a70000016d000001ba0000011a000001d60000014900000117000001d10000015b000000d70000018600000101000001c4"),
            Hex.decode("0000012b000001a9000000d8000001ec000001b70000011f0000019a0000006a00000008000001ca0000011400000061000001cc000001f8000001db000001ee00000141000001150000018a000000a0000000f8000000db000001950000005b000001d0000001fd000000630000007b000000ba00000003000000440000002e0000012c000001ea00000106000001070000004e000001ef000001f700000181000000a20000012100000016000001c2000001fe0000013c0000015d000001c70000013900000060000001670000010d000000990000018f000000fe00000185000001bd000000b2000001e0000001990000003e000001d500000129000001cb00000112000001ce000000fb000000e20000002a000001cf000000e00000016000000194000001de000001b5000001e2000001aa0000014b000001f000000105000000eb000000e50000002f000001e80000013e000001980000019f000001f1000001e9000001560000012e00000025000001f4000000a9000001e40000018c0000005e0000003200000011000000d4000000fc00000007000001b2000000c200000184000000bb000001d8000001740000005800000095000001fc000001df0000007e000001ed0000016500000193000001f90000012a00000000000001ab000001890000016b0000004c0000017f000000ff000001a8000001dc00000085000001f5000001e50000017300000043000001f3000001d40000014a0000003d000001790000007800000145000001e1000001a7000001ad000000b500000128000001c5000001a20000017500000151000001dd000001a600000088000001da000000f500000147000001d30000005000000022000001e6000000f0000001ae000001bb00000144000000e60000009700000163000001960000017800000035000001c30000009e0000008e000000ce000001b6000001ac0000019c00000124000001b3000000af00000152000000590000001e000001380000017c0000019d000001bc000001570000014e0000001a000001a50000015900000067000001f6000001e7000001be0000013500000177000001040000007d000000c000000190000001af000000ee000001b1000001ff000001b4000001710000010f0000017e00000153000000ec000001bf000001d7000000190000001c0000017000000083000001fa000001f2000001c0000001e30000013b0000019200000116000001430000013400000068000001d9000000aa0000010800000012000000230000013f0000008a0000005f0000009d0000005600000131000001a40000003300000098000001880000013d00000109000001130000000a0000014600000183000001c9000001eb000000ea00000187000001fb000000d6000001270000015f00000069000000ef00000073000000e1000000c10000002600000002000000e30000004a000000e8000000f6000000c500000090000000f2000000310000010a0000010e00000045000000180000003700000047000000c6000000290000004800000102000000090000006e000000de0000006400000065000000840000001d0000003b000000d30000000c0000011e000000bf00000039000000b1000000e7000000540000009b0000001300000074000000490000008200000081000000f4000000a80000008b00000125000000cb000000f90000000400000030000000930000000e000000ae000001030000003a000000cd0000000f000000b6000000d90000003f0000000b0000002d0000006f0000005100000120000000bd000000a6000000df0000011b000000da000000a1000001320000007000000096000000cc000000bc000000c900000089000000400000005700000021000000d5000000c80000014200000155000000800000006b000000be000000a400000066000000c3000000f30000004b000000910000002b000000270000008d000000cf000000b00000005a000000b8000000e90000015000000166000001370000009f0000007c0000007900000042000000770000005d000000140000010c0000001700000172000000d00000016e0000015c00000123000000ab0000015e00000028000000a30000001b0000017a0000012d0000002c0000015a0000003c000000ad0000016100000036000000b70000007500000015000000ed0000004d0000014c000001000000004f0000013000000046000000dc0000009a000000c70000014f0000000d0000011c0000006c0000006d0000002000000001000001260000016a000001820000008c000000870000007a0000017d0000013a000001760000007f000000b40000003400000140000000720000019e00000071000000b30000001f0000014d00000169000000d10000005c000000d20000018d00000053000001110000018b00000148000001970000019b00000119000000760000011d000001a30000016400000062000000410000016c0000010b00000180000000e40000009400000038000000050000016800000055000000c4000001b8000000ca000000b900000010000000dd00000110000001a00000012f000001910000017b0000009c00000024000000f1000001d20000009200000136000000f7000001a100000158000000fa000001cd00000118000001b90000016f000001b000000086000001c1000000ac0000013300000122000000520000008f000001c8000001620000018e0000015400000006000000a5000001c6000000fd000000a70000016d000001ba0000011a000001d60000014900000117000001d10000015b000000d70000018600000101000001c4"),
            Hex.decode("0000012b000001a9000000d8000001ec000001b70000011f000000590000006a00000008000001ca0000011400000061000001cc000001f8000001db000001b100000141000001d50000018a000000a0000001e5000000db000001950000005b000001d00000014a000000630000007b000001d400000003000000440000002e0000012c000001ea00000106000001eb0000004e000001ef0000003d00000181000000a20000012100000022000001c2000001740000013c000001a7000001c7000001390000017300000167000001f7000000990000018f000000fe00000185000001bd000000b2000001e0000001990000003e0000011500000129000001cb00000112000001ce000000fb000000e20000002a000001cf000000e00000016000000194000001de000001b5000001e2000001aa0000014b000001f000000105000000eb000000430000002f000001e80000018c000001980000019f000001f1000001e9000001560000012e00000025000001f4000000a9000001e40000013e0000005e00000032000001f3000000d4000000fc00000007000001b2000000c200000184000000bb000001d8000001470000006000000095000001fc000001df0000007e000001ed0000016500000193000001f90000012a00000000000001ab000001890000016b0000004c0000017f000000ff000001a8000001dc00000085000001f5000000f800000058000000e500000011000000ba000001fd0000010d000000d6000001d700000012000000ec0000015d000001ad000000b500000128000001c5000001a20000017500000151000001dd000001a600000088000001da000000f5000001fe000001d30000005000000016000001e6000000f0000001ae000001bb00000144000000e60000009700000163000001960000017800000035000001c30000009e0000008e000000ce000001b6000001ac0000019c00000124000001b3000000af000001520000019a0000001e000001380000017c0000019d000001bc000000680000014e0000001a000001a50000015900000067000001f6000001e7000001be0000013500000177000001040000007d000000c000000190000001af000000ee0000017e000001ff000001b4000001710000010f000001ee00000153000001e1000001bf00000078000000190000001c0000017000000083000001fa000001f2000001c0000001e30000013b0000019200000116000001430000013400000157000001d9000000aa0000010800000145000000230000013f0000008a0000005f0000009d0000005600000131000001a40000003300000098000001880000013d00000109000001130000000a0000014600000183000001c900000107000000ea00000187000001fb00000179000001270000015f00000069000000ef00000073000000e1000000c10000002600000002000000e30000004a000000e8000000f6000000c500000090000000f2000000310000010a0000010e00000045000000180000003700000047000000c6000000290000004800000102000000090000006e000000de0000006400000065000000840000001d0000003b000000d30000000c0000011e000000bf00000039000000b1000000e7000000540000009b0000001300000074000000490000008200000081000000f4000000a80000008b00000125000000cb000000f90000000400000030000000930000000e000000ae000001030000003a000000cd0000000f000000b6000000d90000003f0000000b0000002d0000006f0000005100000120000000bd000000a6000000df0000011b000000da000000a1000001320000007000000096000000cc000000bc000000c900000089000000400000005700000021000000d5000000c80000014200000155000000800000006b000000be000000a400000066000000c3000000f30000004b000000910000002b000000270000008d000000cf000000b00000005a000000b8000000e90000015000000166000001370000009f0000007c0000007900000042000000770000005d000000140000010c0000001700000172000000d00000016e0000015c00000123000000ab0000015e00000028000000a30000001b0000017a0000012d0000002c0000015a0000003c000000ad0000016100000036000000b70000007500000015000000ed0000004d0000014c000001000000004f0000013000000046000000dc0000009a000000c70000014f0000000d0000011c0000006c0000006d0000002000000001000001260000016a000001820000008c000000870000007a0000017d0000013a000001760000007f000000b40000003400000140000000720000019e00000071000000b30000001f0000014d00000169000000d10000005c000000d20000018d00000053000001110000018b00000148000001970000019b00000119000000760000011d000001a30000016400000062000000410000016c0000010b00000180000000e40000009400000038000000050000016800000055000000c4000001b8000000ca000000b900000010000000dd00000110000001a00000012f000001910000017b0000009c00000024000000f1000001d20000009200000136000000f7000001a100000158000000fa000001cd00000118000001b90000016f000001b000000086000001c1000000ac0000013300000122000000520000008f000001c8000001620000018e0000015400000006000000a5000001c6000000fd000000a70000016d000001ba0000011a000001d60000014900000117000001d10000015b000000d70000018600000101000001c4"),
    };

    private final Semaphore waitSemaphore = new Semaphore(0);
    private final AtomicReference<RC4Cipher> cipher = new AtomicReference<>();

    private final MemoryClient mockShockwaveMemoryClient = new MemoryClient(null) {
        @Override
        public List<byte[]> getRC4Tables() {
            return Arrays.asList(potentialTables);
        }
    };

    private final HConnection mockConnection = new HConnection() {
        @Override
        public HClient getClientType() {
            return HClient.SHOCKWAVE;
        }

        @Override
        public void abort() {
            waitSemaphore.release();
        }
    };

    private final EncryptedPacketHandler mockEncryptedPacketHandler = new ShockwavePacketOutgoingHandler(null, null, null) {
        @Override
        public boolean isEncryptedStream() {
            return true;
        }

        @Override
        public boolean sendToStream(byte[] buffer) {
            return false;
        }

        @Override
        protected void writeOut(byte[] buffer) { }

        @Override
        public void setRc4(RC4Cipher rc4) {
            cipher.set(rc4);
            waitSemaphore.release();
        }
    };

    @Test
    public void testMoveUpDown() {
        final RC4Shockwave rc = new RC4Shockwave(potentialTables[0], 0, 0);

        final int[] tableA = rc.getState().clone();
        final int tableA_X = rc.getQ();
        final int tableA_Y = rc.getJ();

        rc.moveUp();
        rc.moveDown();

        final int[] tableB = rc.getState().clone();
        final int tableB_X = rc.getQ();
        final int tableB_Y = rc.getJ();

        assertArrayEquals(tableA, tableB);
        assertEquals(tableA_X, tableB_X);
        assertEquals(tableA_Y, tableB_Y);
    }

    @Test
    public void testRc4Obtainer() throws Exception {
        final int[] initialTable = new int[] {299, 425, 216, 492, 439, 287, 89, 106, 8, 458, 276, 97, 460, 504, 475, 433, 321, 469, 394, 160, 485, 219, 405, 91, 464, 330, 99, 123, 468, 3, 68, 46, 300, 490, 262, 491, 78, 495, 61, 385, 162, 289, 34, 450, 372, 316, 423, 455, 313, 371, 359, 503, 153, 399, 254, 389, 445, 178, 480, 409, 62, 277, 297, 459, 274, 462, 251, 226, 42, 463, 224, 352, 404, 478, 437, 482, 426, 331, 496, 261, 235, 67, 47, 488, 396, 408, 415, 497, 489, 342, 302, 37, 500, 169, 484, 318, 94, 50, 499, 212, 252, 7, 434, 194, 388, 187, 472, 327, 96, 149, 508, 479, 126, 493, 357, 403, 505, 298, 0, 427, 393, 363, 76, 383, 255, 424, 476, 133, 501, 248, 88, 229, 17, 186, 509, 269, 214, 471, 18, 236, 349, 429, 181, 296, 453, 418, 373, 337, 477, 422, 136, 474, 245, 510, 467, 80, 22, 486, 240, 430, 443, 324, 230, 151, 355, 406, 376, 53, 451, 158, 142, 206, 438, 428, 412, 292, 435, 175, 338, 410, 30, 312, 380, 413, 444, 104, 334, 26, 421, 345, 103, 502, 487, 446, 309, 375, 260, 125, 192, 400, 431, 238, 382, 511, 436, 369, 271, 494, 339, 481, 447, 120, 25, 28, 368, 131, 506, 498, 448, 483, 315, 402, 278, 323, 308, 343, 473, 170, 264, 325, 35, 319, 138, 95, 157, 86, 305, 420, 51, 152, 392, 317, 265, 275, 10, 326, 387, 457, 263, 234, 391, 507, 377, 295, 351, 105, 239, 115, 225, 193, 38, 2, 227, 74, 232, 246, 197, 144, 242, 49, 266, 270, 69, 24, 55, 71, 198, 41, 72, 258, 9, 110, 222, 100, 101, 132, 29, 59, 211, 12, 286, 191, 57, 177, 231, 84, 155, 19, 116, 73, 130, 129, 244, 168, 139, 293, 203, 249, 4, 48, 147, 14, 174, 259, 58, 205, 15, 182, 217, 63, 11, 45, 111, 81, 288, 189, 166, 223, 283, 218, 161, 306, 112, 150, 204, 188, 201, 137, 64, 87, 33, 213, 200, 322, 341, 128, 107, 190, 164, 102, 195, 243, 75, 145, 43, 39, 141, 207, 176, 90, 184, 233, 336, 358, 311, 159, 124, 121, 66, 119, 93, 20, 268, 23, 370, 208, 366, 348, 291, 171, 350, 40, 163, 27, 378, 301, 44, 346, 60, 173, 353, 54, 183, 117, 21, 237, 77, 332, 256, 79, 304, 70, 220, 154, 199, 335, 13, 284, 108, 109, 32, 1, 294, 362, 386, 140, 135, 122, 381, 314, 374, 127, 180, 52, 320, 114, 414, 113, 179, 31, 333, 361, 209, 92, 210, 397, 83, 273, 395, 328, 407, 411, 281, 118, 285, 419, 356, 98, 65, 364, 267, 384, 228, 148, 56, 5, 360, 85, 196, 440, 202, 185, 16, 221, 272, 416, 303, 401, 379, 156, 36, 241, 466, 146, 310, 247, 417, 344, 250, 461, 280, 441, 367, 432, 134, 449, 172, 307, 290, 82, 143, 456, 354, 398, 340, 6, 165, 454, 253, 167, 365, 442, 282, 470, 329, 279, 465, 347, 215, 390, 257, 452};
        final int initialQ = 128;
        final int initialJ = 28;

        // Mock HabboClientFactory to inject our mocked G-MemZ client.
        final MockedStatic<HabboClientFactory> mock = mockStatic(HabboClientFactory.class);

        mock.when(() -> HabboClientFactory.get(mockConnection)).thenReturn(mockShockwaveMemoryClient);

        // Run the RC4 obtainer.
        final Rc4Obtainer obtainer = new Rc4Obtainer(mockConnection);

        obtainer.setFlashPacketHandlers(mockEncryptedPacketHandler);

        for (byte[] buffer : encryptedBuffers) {
            mockEncryptedPacketHandler.act(buffer);
        }

        waitSemaphore.acquire();

        final RC4Cipher c = cipher.get();

        // Validate an exact match.
        assertNotNull(c);
        assertArrayEquals(initialTable, c.getState());
        assertEquals(initialQ, c.getQ());
        assertEquals(initialJ, c.getJ());

        mock.close();
    }

    @Test
    public void testEncipher() {
        final int[] stateStart = new int[] {459, 359, 460, 402, 430, 219, 508, 308, 493, 286, 407, 275, 368, 274, 490, 136, 408, 465, 300, 456, 371, 3, 385, 395, 414, 468, 306, 477, 467, 471, 270, 0, 347, 399, 162, 96, 370, 339, 360, 377, 481, 391, 478, 177, 182, 507, 19, 153, 101, 331, 358, 383, 473, 89, 175, 363, 411, 168, 425, 482, 90, 242, 211, 92, 495, 164, 106, 457, 53, 448, 469, 223, 386, 107, 412, 504, 325, 409, 497, 157, 166, 49, 13, 419, 185, 71, 74, 330, 366, 121, 261, 240, 390, 63, 498, 291, 450, 189, 432, 389, 256, 317, 510, 499, 113, 496, 436, 337, 416, 205, 280, 492, 476, 29, 454, 303, 283, 474, 343, 146, 329, 380, 511, 67, 509, 160, 70, 294, 506, 85, 188, 442, 480, 435, 265, 346, 424, 372, 487, 387, 333, 445, 488, 401, 444, 32, 378, 429, 374, 310, 326, 289, 458, 479, 381, 453, 322, 437, 163, 257, 43, 494, 394, 404, 41, 186, 35, 485, 319, 81, 39, 249, 392, 373, 1, 11, 434, 461, 491, 94, 34, 179, 367, 313, 122, 502, 484, 423, 441, 278, 295, 400, 111, 332, 463, 489, 427, 452, 396, 466, 369, 428, 8, 27, 244, 239, 38, 503, 282, 355, 334, 354, 328, 439, 20, 324, 320, 297, 501, 415, 25, 486, 410, 365, 433, 438, 315, 357, 417, 352, 292, 197, 116, 338, 284, 259, 14, 51, 241, 318, 327, 483, 431, 42, 500, 178, 198, 299, 462, 208, 212, 290, 50, 375, 455, 420, 80, 137, 73, 125, 243, 149, 139, 250, 142, 10, 133, 93, 161, 251, 210, 135, 194, 225, 108, 91, 238, 266, 105, 147, 6, 115, 247, 193, 87, 229, 86, 75, 234, 99, 287, 100, 203, 235, 260, 277, 167, 187, 246, 231, 33, 23, 126, 150, 285, 141, 152, 66, 183, 4, 174, 232, 44, 181, 279, 103, 209, 18, 36, 195, 227, 253, 117, 276, 7, 78, 16, 215, 59, 88, 129, 83, 9, 131, 165, 192, 271, 323, 336, 104, 82, 224, 200, 255, 120, 22, 130, 76, 12, 26, 119, 57, 216, 15, 248, 190, 214, 72, 321, 213, 298, 302, 263, 348, 155, 132, 124, 304, 220, 237, 349, 97, 305, 296, 112, 128, 138, 64, 312, 143, 267, 62, 2, 55, 258, 173, 56, 109, 236, 314, 140, 65, 341, 364, 60, 345, 58, 351, 226, 28, 254, 95, 123, 79, 134, 170, 204, 376, 311, 102, 156, 52, 382, 30, 281, 69, 68, 176, 288, 98, 403, 24, 388, 405, 184, 268, 309, 218, 201, 384, 48, 221, 61, 406, 202, 158, 342, 180, 17, 293, 5, 21, 118, 40, 31, 47, 222, 77, 447, 307, 206, 196, 449, 171, 45, 144, 154, 379, 264, 316, 361, 418, 393, 272, 207, 451, 464, 353, 273, 84, 114, 217, 191, 350, 421, 54, 169, 37, 233, 151, 397, 356, 269, 470, 262, 472, 145, 252, 426, 148, 127, 446, 443, 228, 475, 413, 110, 46, 199, 422, 172, 362, 340, 344, 230, 245, 440, 398, 159, 335, 505, 301};
        final int[] stateEnd = new int[] {459, 359, 460, 402, 430, 219, 508, 308, 493, 286, 407, 275, 368, 274, 188, 14, 408, 465, 337, 456, 371, 3, 385, 395, 414, 468, 306, 477, 467, 471, 270, 0, 347, 399, 162, 96, 370, 339, 360, 377, 481, 462, 478, 177, 182, 507, 490, 153, 101, 331, 358, 383, 473, 89, 175, 363, 411, 168, 425, 482, 90, 366, 211, 92, 495, 164, 106, 457, 387, 448, 469, 223, 386, 107, 412, 504, 325, 409, 497, 157, 166, 49, 85, 419, 429, 71, 74, 330, 242, 121, 261, 435, 390, 63, 438, 291, 450, 189, 432, 389, 265, 317, 424, 499, 113, 496, 436, 300, 94, 205, 280, 492, 476, 29, 454, 303, 283, 474, 343, 146, 329, 380, 511, 67, 509, 160, 70, 294, 506, 13, 19, 369, 319, 240, 256, 295, 510, 501, 332, 53, 333, 445, 488, 401, 444, 32, 378, 185, 322, 310, 326, 289, 458, 479, 381, 453, 374, 437, 163, 257, 43, 494, 394, 404, 41, 186, 35, 485, 480, 81, 39, 249, 392, 373, 1, 11, 434, 461, 491, 416, 34, 179, 367, 313, 122, 502, 484, 423, 441, 278, 346, 400, 111, 487, 463, 489, 427, 452, 396, 466, 442, 428, 282, 27, 244, 239, 38, 503, 8, 355, 334, 354, 328, 439, 20, 324, 320, 297, 372, 415, 25, 486, 410, 365, 433, 498, 315, 357, 417, 352, 292, 197, 116, 338, 284, 259, 136, 51, 241, 318, 327, 483, 431, 42, 500, 178, 198, 299, 391, 208, 212, 290, 50, 375, 455, 420, 80, 137, 73, 125, 243, 149, 139, 250, 142, 10, 133, 93, 161, 251, 210, 135, 194, 225, 108, 91, 238, 266, 105, 147, 6, 115, 247, 193, 87, 229, 86, 75, 234, 99, 287, 100, 203, 235, 260, 277, 167, 187, 246, 231, 33, 23, 126, 150, 285, 141, 152, 66, 183, 4, 174, 232, 44, 181, 279, 103, 209, 18, 36, 195, 227, 253, 117, 276, 7, 78, 16, 215, 59, 88, 129, 83, 9, 131, 165, 192, 271, 323, 336, 104, 82, 224, 200, 255, 120, 22, 130, 76, 12, 26, 119, 57, 216, 15, 248, 190, 214, 72, 321, 213, 298, 302, 263, 348, 155, 132, 124, 304, 220, 237, 349, 97, 305, 296, 112, 128, 138, 64, 312, 143, 267, 62, 2, 55, 258, 173, 56, 109, 236, 314, 140, 65, 341, 364, 60, 345, 58, 351, 226, 28, 254, 95, 123, 79, 134, 170, 204, 376, 311, 102, 156, 52, 382, 30, 281, 69, 68, 176, 288, 98, 403, 24, 388, 405, 184, 268, 309, 218, 201, 384, 48, 221, 61, 406, 202, 158, 342, 180, 17, 293, 5, 21, 118, 40, 31, 47, 222, 77, 447, 307, 206, 196, 449, 171, 45, 144, 154, 379, 264, 316, 361, 418, 393, 272, 207, 451, 464, 353, 273, 84, 114, 217, 191, 350, 421, 54, 169, 37, 233, 151, 397, 356, 269, 470, 262, 472, 145, 252, 426, 148, 127, 446, 443, 228, 475, 413, 110, 46, 199, 422, 172, 362, 340, 344, 230, 245, 440, 398, 159, 335, 505, 301};

        final byte[] dataIn = "hello world".getBytes(StandardCharsets.UTF_8);

        final RC4Cipher rc4 = new RC4Shockwave(stateStart, 128, 253);

        final byte[] dataOut = rc4.cipher(dataIn);

        assertEquals(139, rc4.getQ());
        assertEquals(68, rc4.getJ());
        assertArrayEquals(stateEnd, rc4.getState());
        assertEquals("2EbdbPs+ekyCEx4", new String(dataOut, StandardCharsets.UTF_8));
    }

    @Test
    public void testDecipher() {
        final int[] stateStart = new int[] {459, 359, 460, 402, 430, 219, 508, 308, 493, 286, 407, 275, 368, 274, 490, 136, 408, 465, 300, 456, 371, 3, 385, 395, 414, 468, 306, 477, 467, 471, 270, 0, 347, 399, 162, 96, 370, 339, 360, 377, 481, 391, 478, 177, 182, 507, 19, 153, 101, 331, 358, 383, 473, 89, 175, 363, 411, 168, 425, 482, 90, 242, 211, 92, 495, 164, 106, 457, 53, 448, 469, 223, 386, 107, 412, 504, 325, 409, 497, 157, 166, 49, 13, 419, 185, 71, 74, 330, 366, 121, 261, 240, 390, 63, 498, 291, 450, 189, 432, 389, 256, 317, 510, 499, 113, 496, 436, 337, 416, 205, 280, 492, 476, 29, 454, 303, 283, 474, 343, 146, 329, 380, 511, 67, 509, 160, 70, 294, 506, 85, 188, 442, 480, 435, 265, 346, 424, 372, 487, 387, 333, 445, 488, 401, 444, 32, 378, 429, 374, 310, 326, 289, 458, 479, 381, 453, 322, 437, 163, 257, 43, 494, 394, 404, 41, 186, 35, 485, 319, 81, 39, 249, 392, 373, 1, 11, 434, 461, 491, 94, 34, 179, 367, 313, 122, 502, 484, 423, 441, 278, 295, 400, 111, 332, 463, 489, 427, 452, 396, 466, 369, 428, 8, 27, 244, 239, 38, 503, 282, 355, 334, 354, 328, 439, 20, 324, 320, 297, 501, 415, 25, 486, 410, 365, 433, 438, 315, 357, 417, 352, 292, 197, 116, 338, 284, 259, 14, 51, 241, 318, 327, 483, 431, 42, 500, 178, 198, 299, 462, 208, 212, 290, 50, 375, 455, 420, 80, 137, 73, 125, 243, 149, 139, 250, 142, 10, 133, 93, 161, 251, 210, 135, 194, 225, 108, 91, 238, 266, 105, 147, 6, 115, 247, 193, 87, 229, 86, 75, 234, 99, 287, 100, 203, 235, 260, 277, 167, 187, 246, 231, 33, 23, 126, 150, 285, 141, 152, 66, 183, 4, 174, 232, 44, 181, 279, 103, 209, 18, 36, 195, 227, 253, 117, 276, 7, 78, 16, 215, 59, 88, 129, 83, 9, 131, 165, 192, 271, 323, 336, 104, 82, 224, 200, 255, 120, 22, 130, 76, 12, 26, 119, 57, 216, 15, 248, 190, 214, 72, 321, 213, 298, 302, 263, 348, 155, 132, 124, 304, 220, 237, 349, 97, 305, 296, 112, 128, 138, 64, 312, 143, 267, 62, 2, 55, 258, 173, 56, 109, 236, 314, 140, 65, 341, 364, 60, 345, 58, 351, 226, 28, 254, 95, 123, 79, 134, 170, 204, 376, 311, 102, 156, 52, 382, 30, 281, 69, 68, 176, 288, 98, 403, 24, 388, 405, 184, 268, 309, 218, 201, 384, 48, 221, 61, 406, 202, 158, 342, 180, 17, 293, 5, 21, 118, 40, 31, 47, 222, 77, 447, 307, 206, 196, 449, 171, 45, 144, 154, 379, 264, 316, 361, 418, 393, 272, 207, 451, 464, 353, 273, 84, 114, 217, 191, 350, 421, 54, 169, 37, 233, 151, 397, 356, 269, 470, 262, 472, 145, 252, 426, 148, 127, 446, 443, 228, 475, 413, 110, 46, 199, 422, 172, 362, 340, 344, 230, 245, 440, 398, 159, 335, 505, 301};
        final int[] stateEnd = new int[] {459, 359, 460, 402, 430, 219, 508, 308, 493, 286, 407, 275, 368, 274, 188, 14, 408, 465, 337, 456, 371, 3, 385, 395, 414, 468, 306, 477, 467, 471, 270, 0, 347, 399, 162, 96, 370, 339, 360, 377, 481, 462, 478, 177, 182, 507, 490, 153, 101, 331, 358, 383, 473, 89, 175, 363, 411, 168, 425, 482, 90, 366, 211, 92, 495, 164, 106, 457, 387, 448, 469, 223, 386, 107, 412, 504, 325, 409, 497, 157, 166, 49, 85, 419, 429, 71, 74, 330, 242, 121, 261, 435, 390, 63, 438, 291, 450, 189, 432, 389, 265, 317, 424, 499, 113, 496, 436, 300, 94, 205, 280, 492, 476, 29, 454, 303, 283, 474, 343, 146, 329, 380, 511, 67, 509, 160, 70, 294, 506, 13, 19, 369, 319, 240, 256, 295, 510, 501, 332, 53, 333, 445, 488, 401, 444, 32, 378, 185, 322, 310, 326, 289, 458, 479, 381, 453, 374, 437, 163, 257, 43, 494, 394, 404, 41, 186, 35, 485, 480, 81, 39, 249, 392, 373, 1, 11, 434, 461, 491, 416, 34, 179, 367, 313, 122, 502, 484, 423, 441, 278, 346, 400, 111, 487, 463, 489, 427, 452, 396, 466, 442, 428, 282, 27, 244, 239, 38, 503, 8, 355, 334, 354, 328, 439, 20, 324, 320, 297, 372, 415, 25, 486, 410, 365, 433, 498, 315, 357, 417, 352, 292, 197, 116, 338, 284, 259, 136, 51, 241, 318, 327, 483, 431, 42, 500, 178, 198, 299, 391, 208, 212, 290, 50, 375, 455, 420, 80, 137, 73, 125, 243, 149, 139, 250, 142, 10, 133, 93, 161, 251, 210, 135, 194, 225, 108, 91, 238, 266, 105, 147, 6, 115, 247, 193, 87, 229, 86, 75, 234, 99, 287, 100, 203, 235, 260, 277, 167, 187, 246, 231, 33, 23, 126, 150, 285, 141, 152, 66, 183, 4, 174, 232, 44, 181, 279, 103, 209, 18, 36, 195, 227, 253, 117, 276, 7, 78, 16, 215, 59, 88, 129, 83, 9, 131, 165, 192, 271, 323, 336, 104, 82, 224, 200, 255, 120, 22, 130, 76, 12, 26, 119, 57, 216, 15, 248, 190, 214, 72, 321, 213, 298, 302, 263, 348, 155, 132, 124, 304, 220, 237, 349, 97, 305, 296, 112, 128, 138, 64, 312, 143, 267, 62, 2, 55, 258, 173, 56, 109, 236, 314, 140, 65, 341, 364, 60, 345, 58, 351, 226, 28, 254, 95, 123, 79, 134, 170, 204, 376, 311, 102, 156, 52, 382, 30, 281, 69, 68, 176, 288, 98, 403, 24, 388, 405, 184, 268, 309, 218, 201, 384, 48, 221, 61, 406, 202, 158, 342, 180, 17, 293, 5, 21, 118, 40, 31, 47, 222, 77, 447, 307, 206, 196, 449, 171, 45, 144, 154, 379, 264, 316, 361, 418, 393, 272, 207, 451, 464, 353, 273, 84, 114, 217, 191, 350, 421, 54, 169, 37, 233, 151, 397, 356, 269, 470, 262, 472, 145, 252, 426, 148, 127, 446, 443, 228, 475, 413, 110, 46, 199, 422, 172, 362, 340, 344, 230, 245, 440, 398, 159, 335, 505, 301};

        final byte[] dataIn = "2EbdbPs+ekyCEx4".getBytes(StandardCharsets.UTF_8);

        final RC4Cipher rc4 = new RC4Shockwave(stateStart, 128, 253);

        final byte[] dataOut = rc4.decipher(dataIn);

        assertEquals(139, rc4.getQ());
        assertEquals(68, rc4.getJ());
        assertArrayEquals(stateEnd, rc4.getState());
        assertEquals("hello world", new String(dataOut, StandardCharsets.UTF_8));
    }
}
